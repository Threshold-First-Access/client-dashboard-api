#
# Client Dashboard API Definitions
#
swagger: "2.0"
info:
  title: Client Dashboard API
  description: APIs to support the client dashboard functionality.
  contact:
    name: Support
    url: http://www.firstaccessmarket.com
    email: support@firstaccessmarket.com
  license:
    name: none
  version: 0.1
basePath: /v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

#
# Security
#
securityDefinitions:
  jwt:
    type: apiKey
    name: token
    in: header

#
# Paths
#
paths:

  #
  # Users
  #
  /users:
    post:
      summary: Creates a new user.
      parameters:
        - name: body
          in: body
          description: The user to create.
          required: true
          schema: { $ref: '#/definitions/User' }
      tags:
        - Users
      responses:
        "200":
          description: The user object
          schema: { $ref: '#/definitions/User' }
        default:
          description: error
          schema: { $ref: '#/definitions/Error' }

  /users/{id}:
    get:
      summary: Gets a user
      parameters:
        - name: id
          in: path
          description: The ID of the user to fetch
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: User object
          schema: { $ref: '#/definitions/User' }
        default:
          description: Error
          schema: { $ref: '#/definitions/Error' }

  /users/{id}/status/{action}:
    post:
      summary: Activates a user
      parameters:
        - name: id
          in: path
          description: The ID of the user to fetch
          required: true
          type: integer
          format: int64
        - name: action
          in: path
          description: The action to perform on the user (activate or deactivate)
          required: true
          type: string
          enum: ['activate', 'deactivate']
      responses:
        "200":
          description: Success
          schema:
            properties:
              message: { type: string }
        default:
          schema: { $ref: '#/definitions/Error' }

  /login:
    post:
      summary: Logs a user into the system.
      parameters:
        - name: body
          in: body
          description: The login request
          required: true
          schema: { $ref: '#/definitions/LoginRequest' }
      responses:
        "200":
          schema: { $ref: '#/definitions/LoginSuccess' }
        default:
          schema: { $ref: '#/definitions/Error' }

  #
  # Compaanies
  #
  /companies:
    post:
      summary: Creates a new compoany
      parameters:
        - name: body
          in: body
          description: The companny to create
          required: true
          schema: { $ref: '#/definitions/NewCompany' }


#
# Definitions
#
definitions:

  #
  # User Object Definitions
  #
  NewUser:
    type: object
    required: [ first_name, last_name, email ]
    properties:
      first_name: { type: string }
      last_name:  { type: string }
      email:      { type: string, format: email }
      type:       { type: string, enum: ["first_access","client"] }
      password:   { type: string, format: password }
      company_id: { type: number, format: int32, default: null }
      active:     { type: boolean, default: false }

  User:
    allOf:
      - { ref: '#/definitions/NewUser' }
      - { $ref: '#/definitions/AuditFields' }
      -
        properties:
          id:         { type: number, format: int32 }
          roles:      { type: array }

  #
  # Login Definitions
  #
  LoginRequest:
    type: object
    required: ["email", "password"]
    properties:
      email:    { type: string, format: email }
      password: { type: string, format: password }

  LoginSuccess:
    type: object
    required: ["message","token"]
    properties:
      message: { type: string }
      token:   { type: string }

  #
  # Company Definitions
  #
  NewCompany:
    type: object
    required: [ "name", "country" ]
    properties:
      name:     { type: string }
      country:  { type: string, maxlength: 2, minlength: 2 }

  Company:
    allOf:
      - { $ref: '#/definitions/NewCompany' }
      - { $ref: '#/definitions/AuditFields' }
      -
        properties:
          id:           { type: number, format: int32 }
          timezone:     { type: string }
          currency:     { type: string }
          language:     { type: string, maxlength: 2, minlength: 2 }
          country_name: { type: string }

  #
  # General Definitions
  #
  AuditFields:
    type: object
    properties:
      updated_at: { type: string, format: 'date_time' }
      created_at: { type: string, format: 'date_time' }

  #
  # Error Object Definitions
  #
  Error:
    type: object
    properties:
      code:       { type: string }
      message:    { type: string }
      data:       { type: object }